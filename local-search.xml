<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>qv2ray客户端配置naive-proxy/trojan</title>
    <link href="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan.html"/>
    <url>/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan.html</url>
    
    <content type="html"><![CDATA[<p>目前来说，支持Linux&#x2F;windows&#x2F;MacOS多平台的代理客户端可选的有<code>clash</code>、<code>qv2ray</code>等，目前来说，还是qv2ray更全面，支持常见的<code>naiveproxy</code>、<code>trojan</code>、<code>vless</code>、<code>vmess</code>等。 但是，qv2ray客户端的配置略显麻烦，下面简单介绍下相关配置操作。</p><p>这里把常规64位的三平台及Android平台的文件统一放置到网盘了，可自行取用：</p><ul><li><a href="https://drive.google.com/drive/folders/1Lx59uXUWU4cWBnzx0njy0M5kItlU4anO?usp=drive_link">Google云盘</a></li><li><a href="https://pan.quark.cn/s/3549011526a8">夸克网盘</a></li></ul><h2 id="1、下载-Qv2ray-客户端"><a href="#1、下载-Qv2ray-客户端" class="headerlink" title="1、下载 Qv2ray 客户端"></a>1、下载 Qv2ray 客户端</h2><p>点击根据平台下载 <a href="https://github.com/Qv2ray/Qv2ray/releases/tag/v2.7.0">qv2ray-2.7.0</a>  </p><p><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016175014273.png" alt="image-20241016175014273"></p><h2 id="2、下载-xray-core"><a href="#2、下载-xray-core" class="headerlink" title="2、下载 xray-core"></a>2、下载 <code>xray-core</code></h2><p><code>xray-core</code>是 qv2ray 代理客户端的核心，必不可少。前几年使用<code>v2ray-core</code>更多一些，但因为GFW的存在，xray-core迎难而上！</p><p>点击根据平台下载 [xray-core v24.9.30](<a href="https://github.com/XTLS/Xray-core/releases/tag/v24.9.30">Release Xray-core v24.9.30 · XTLS&#x2F;Xray-core (github.com)</a>)，下载界面平台分类较多，根据自己电脑的平台下载对应的<code>Xray-xxxx-xx.zip</code>压缩包即可。</p><p><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016175808201.png" alt="image-20241016175808201"></p><h2 id="3、下载-插件"><a href="#3、下载-插件" class="headerlink" title="3、下载 &#96;插件"></a>3、下载 &#96;插件</h2><ul><li><p>[QvPlugin-NaiveProxy](<a href="https://github.com/Qv2ray/QvPlugin-NaiveProxy">Releases · Qv2ray&#x2F;QvPlugin-NaiveProxy (github.com)</a>)</p></li><li><p>下载界面：<a href="https://github.com/Qv2ray/QvPlugin-NaiveProxy/releases">Releases · Qv2ray&#x2F;QvPlugin-NaiveProxy (github.com)</a></p><ul><li><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016180219271.png" alt="image-20241016180219271"></li></ul></li><li><p><a href="https://github.com/Qv2ray/QvPlugin-Trojan">QvPlugin-Trojan</a></p><ul><li>下载界面：<a href="https://github.com/Qv2ray/QvPlugin-Trojan/releases/tag/v3.0.0"><a href="https://github.com/Qv2ray/QvPlugin-Trojan/releases/tag/v3.0.0">Release QvPlugin-Trojan 3.0 · Qv2ray&#x2F;QvPlugin-Trojan (github.com)</a></a><ul><li><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016180615245.png" alt="image-20241016180615245"></li></ul></li></ul></li></ul><h2 id="4、下载插件对应的可执行文件"><a href="#4、下载插件对应的可执行文件" class="headerlink" title="4、下载插件对应的可执行文件"></a>4、下载插件对应的可执行文件</h2><h3 id="4-1、NaiveProxy"><a href="#4-1、NaiveProxy" class="headerlink" title="4.1、NaiveProxy"></a>4.1、NaiveProxy</h3><p>点击根据平台下载 [NaiveProxy v130.0.6723.40-1](<a href="https://github.com/klzgrad/naiveproxy/releases/tag/v130.0.6723.40-1">Release v130.0.6723.40-1 · klzgrad&#x2F;naiveproxy (github.com)</a>)</p><h3 id="4-2、Trojan"><a href="#4-2、Trojan" class="headerlink" title="4.2、Trojan"></a>4.2、Trojan</h3><p>点击根据平台下载 [Trojan 1.16.0](<a href="https://github.com/trojan-gfw/trojan/releases/tag/v1.16.0">Release Trojan 1.16.0 · trojan-gfw&#x2F;trojan (github.com)</a>)</p><p><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016182642270.png" alt="image-20241016182642270"></p><h2 id="5、配置客户端"><a href="#5、配置客户端" class="headerlink" title="5、配置客户端"></a>5、配置客户端</h2><p>客户端v2ray可执行文件或插件的位置，可以单独放置，也可找到Qv2ray的安装路径，将解压后的可执行文件&#x2F;插件的文件夹放到该安装路径下，以方便在不同机器间互相拷贝。</p><ol><li><p>打开客户端，选择“首选项[Preference]”，配置V2ray核心可执行文件路径；可使用绝对路径，也可使用相对路径（这里需要将对应的核心文件解压到qv2ray的安装目录下），<br>选择完成后，点击<code>检查V2ray核心设置</code>按钮，弹框展示版本信息，说明配置正确，如果弹出其他异常信息，请检查xray文件是否为电脑对应平台的，其次路径是否正确。<br><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016190433348.png" alt="image-20241016190433348"></p></li><li><p>配置插件，插件→打开本地插件目录→选择对应的插件加载。加载完成后在右侧的<code>元数据</code>页签下的路径可看到插件的完整路径。<br><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016191304710.png" alt="image-20241016191304710"></p></li><li><p>配置插件的可执行文件，这里以NaiveProxy插件的可执行文件内核路径配置为例，配置成功后，点击<code>Test Run</code>按钮，弹框展示版本信息。其他类型的插件对应的可执行核心文件配置方式类似。<br>   <img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016191926918.png" alt="image-20241016191926918"></p></li><li><p>导入可用的NaiveProxy代理配置，或者自己搭建的梯子，使用新建的方式添加。<br><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016192217718.png" alt="image-20241016192217718"></p></li></ol><p>​<img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016192903020.png" alt="image-20241016192903020"></p><ol start="5"><li>导入或新建成功后，在对应分组里选中该配置，双击启用，然后浏览器打开<code>https://google.com</code>测试效果即可。</li></ol><h2 id="6、Android客户端配置"><a href="#6、Android客户端配置" class="headerlink" title="6、Android客户端配置"></a>6、Android客户端配置</h2><p>Android客户端使用<code>AnXray</code>,它也需要安装对应代理类型的插件配合使用。</p><ul><li><p><a href="https://github.com/zeromake/AnXray/releases/tag/v0.4.0-rc06">AnXray.apk</a></p></li><li><p><a href="https://github.com/klzgrad/naiveproxy/releases/tag/v130.0.6723.40-1">naiveproxy-plugin-v130.0.6723.40-1.apk</a></p><ul><li>这里需要根据自己手机的架构选择对应的安装包下载：<br><img src="/qv2ray%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEnaive-proxy-trojan/image-20241016194134560.png" alt="image-20241016194134560"></li></ul></li></ul><p>安装完成后，导入对应的代理配置启用即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>qv2ray</tag>
      
      <tag>naiveproxy</tag>
      
      <tag>trojan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jetbrains IDE配置Docker远程部署环境</title>
    <link href="/Jetbrains%20IDE%E9%85%8D%E7%BD%AEDocker%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83.html"/>
    <url>/Jetbrains%20IDE%E9%85%8D%E7%BD%AEDocker%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、基础环境"><a href="#一、基础环境" class="headerlink" title="一、基础环境"></a>一、基础环境</h2><ul><li>win10&#x2F;win11</li><li>Ubuntu24或其它远程Linux</li><li>点击下载<code>docker-cli</code>工具：<a href="https://github.com/docker/cli/tags">docker.exe</a>、 <a href="https://github.com/docker/compose/releases">docker-compose.exe</a></li></ul><p>这里之所以使用<code>cli</code>工具进行连接，是因为windows端的Docker-Desktop实在是太占用资源了，不必安装这么一个臃肿的怪物！</p><h2 id="二、配置说明"><a href="#二、配置说明" class="headerlink" title="二、配置说明"></a>二、配置说明</h2><p>大概步骤如下：  </p><ol><li>Ubuntu24安装docker并开启远程登录；</li><li>IDE配置<code>Docker tools</code>（配置windows端的<code>docker.exe</code>【docker-cli】位置）</li><li>IDE配置<code>Docker实例</code>（通过windows端的<code>docker.exe</code>【docker-cli】与远程Docker环境互联）</li></ol><h3 id="2-1、Ubuntu24开启docker远程访问"><a href="#2-1、Ubuntu24开启docker远程访问" class="headerlink" title="2.1、Ubuntu24开启docker远程访问"></a>2.1、Ubuntu24开启docker远程访问</h3><p>Ubuntu24默认情况下，会使用<code>snap</code>配置Docker，个人感觉在此处不太好用，我选择清理由snap安装、管理的docker，改由systemctl去管理。<br>如果之前已经在跑一些镜像了，可以做<code>docker数据迁移</code>，保留原来的容器里完整的运行数据。  </p><p>Ubuntu环境安装这里略过~~~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /usr/lib/systemd/system/docker.service<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Service下面的Execstat部分添加：-H tcp://0.0.0.0:2375</span><br>[Service]<br>ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375 --containerd=/run/containerd/containerd.sock<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改完成后保存</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重载docker守护进程</span><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker服务</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h4 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl http://192.168.0.108:2375/version<br></code></pre></td></tr></table></figure><p>返回如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Platform&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Docker Engine - Community&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Components&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Engine&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;27.2.0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;ApiVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.47&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;Arch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;amd64&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;BuildTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-08-27T14:15:15.000000000+00:00&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;Experimental&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;GitCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3ab5c7d&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;GoVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go1.21.13&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;KernelVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.8.0-41-generic&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;MinAPIVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.24&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;Os&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linux&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;containerd&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.7.21&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;GitCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;472731909fa34bd7bc9c087e4c27943f9835f111&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;runc&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.1.13&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;GitCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v1.1.13-0-g58aa920&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker-init&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.19.0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;GitCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;de40ad0&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;27.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ApiVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.47&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;MinAPIVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.24&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;GitCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3ab5c7d&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;GoVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go1.21.13&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Os&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linux&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Arch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;amd64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;KernelVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.8.0-41-generic&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;BuildTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-08-27T14:15:15.000000000+00:00&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-2、IDE配置Docker-Tools"><a href="#2-2、IDE配置Docker-Tools" class="headerlink" title="2.2、IDE配置Docker Tools"></a>2.2、IDE配置Docker Tools</h3><p>下载好的<code>docker.exe</code>和<code>docker-compose.exe</code>解压后找个地方存放，然后开始配置 Docker Tools</p><p><img src="/Jetbrains%20IDE%E9%85%8D%E7%BD%AEDocker%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20240918204921533-1726663769688-1.png" alt="image-20240918204921533"></p><h3 id="2-3、IDE配置Docker实例"><a href="#2-3、IDE配置Docker实例" class="headerlink" title="2.3、IDE配置Docker实例"></a>2.3、IDE配置Docker实例</h3><p><img src="/Jetbrains%20IDE%E9%85%8D%E7%BD%AEDocker%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20240918205225730-1726663950198-3.png" alt="image-20240918205225730"></p><p>配置完成，之后就可以结合 <code>Dockerfile</code> 文件部署到远程服务器了！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Jetbrains IDE</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极空间NAS搭建vaultwarden自托管密码管理中心</title>
    <link href="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83.html"/>
    <url>/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83.html</url>
    
    <content type="html"><![CDATA[<h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><p>常在互联网冲浪的人，大都会因为不同需求会在几十甚至上百个网站注册账号，为了方便记忆，总不能都用同一个密码吧，这样太不安全。浏览器虽然自带有密码管理的工具，但有时候使用手机登录时，一时半会想不起来密码，电脑又不在跟前，那叫一个干着急啊！<br>目前有很多商业软件供大众使用，但都需要付费使用，不划算！如果自己有闲置的电脑或服务器资源、NAS等，不妨自己搭建一个密码管理服务，用于记录日常生活中在不同网站注册的账号、密码，然后通过不同平台的客户端实现下次登录时自动填充密码。</p><h1 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h1><ul><li>【极空间】或其它支持Docker的服务器</li><li>已申请https证书的域名</li></ul><h1 id="一、vaultwarden服务搭建"><a href="#一、vaultwarden服务搭建" class="headerlink" title="一、vaultwarden服务搭建"></a>一、vaultwarden服务搭建</h1><h2 id="1-搜索下载-vaultwarden-server-镜像"><a href="#1-搜索下载-vaultwarden-server-镜像" class="headerlink" title="1. 搜索下载 vaultwarden/server 镜像"></a>1. 搜索下载 <code>vaultwarden/server</code> 镜像</h2><p><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img.png" alt="img.png"></p><h2 id="2-极空间里创建数据目录docker-vaultwarden和容器"><a href="#2-极空间里创建数据目录docker-vaultwarden和容器" class="headerlink" title="2. 极空间里创建数据目录docker/vaultwarden和容器"></a>2. 极空间里创建数据目录<code>docker/vaultwarden</code>和容器</h2><p><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_1.png" alt="img_1.png"></p><h2 id="3-配置网络端口"><a href="#3-配置网络端口" class="headerlink" title="3. 配置网络端口"></a>3. 配置网络端口</h2><p><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_2.png" alt="img_2.png"></p><h2 id="4-确认启动"><a href="#4-确认启动" class="headerlink" title="4. 确认启动"></a>4. 确认启动</h2><p><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_3.png" alt="img_3.png"></p><p>完整shell命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取镜像</span><br>docker pull vaultwarden/server:latest<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br>docker run -d --name vaultwarden -v ~/vaultwarden/:/data/ -p 8380:80 vaultwarden/server:latest<br></code></pre></td></tr></table></figure><h1 id="二、配置内网穿透"><a href="#二、配置内网穿透" class="headerlink" title="二、配置内网穿透"></a>二、配置内网穿透</h1><p>容器虽然已启动，但目前还无法通过<code>http://192.168.0.109:8380</code>进行注册和登录，需要先配置一下https，这里使用<code>frp</code>进行内网穿透，这里使用<code>子域名+https</code>的方式进行穿透。</p><p>配置方式可参考<a href="./FRP%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEhttps.md">FRP内网服务配置https.</a></p><p>具体配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">[[proxies]]<br>name = <span class="hljs-string">&quot;valutwarden&quot;</span><br>type = <span class="hljs-string">&quot;https&quot;</span><br>subdomain = <span class="hljs-string">&quot;warden&quot;</span> <br><br><span class="hljs-comment">//localAddr表示vaultwarden服务的链接地址</span><br><span class="hljs-comment">//crtPath 和 keyPath是泛域名证书的路径</span><br>[proxies.<span class="hljs-property">plugin</span>]<br>type = <span class="hljs-string">&quot;https2http&quot;</span><br>localAddr = <span class="hljs-string">&quot;192.168.0.109:8380&quot;</span><br>crtPath = <span class="hljs-string">&quot;/etc/frp/server.crt&quot;</span><br>keyPath = <span class="hljs-string">&quot;/etc/frp/server.key&quot;</span><br></code></pre></td></tr></table></figure><p>配置好后，重启frpc服务，让配置生效。</p><h1 id="三、服务配置"><a href="#三、服务配置" class="headerlink" title="三、服务配置"></a>三、服务配置</h1><p>登录<code>https://warden.cgio.asia</code>（这里的cgio.asia为自己已申请泛域名证书的域名），使用邮箱注册账号并登录。</p><p>这里请记好注册的邮箱和主密码，之后在配置浏览器插件和移动端同步时，都需要用到该账号密码。</p><p>如果之前在谷歌或Edge浏览器中保存了密码，可将其导出来后再导入到vaultwarden中进行管理。</p><h2 id="1-从Edge浏览器中导出保存的密码"><a href="#1-从Edge浏览器中导出保存的密码" class="headerlink" title="1. 从Edge浏览器中导出保存的密码"></a>1. 从Edge浏览器中导出保存的密码</h2><p><code>Edge浏览器 → 设置 → 个人资料 → 密码</code><br><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_4.png" alt="img_4.png"></p><p>默认情况下，会把这些密码导出到本机用户的<code>文档</code>目录下，名称为<code>Microsoft Edge 密码.csv</code></p><h2 id="2-导出的密码导入到vaultwarden"><a href="#2-导出的密码导入到vaultwarden" class="headerlink" title="2. 导出的密码导入到vaultwarden"></a>2. 导出的密码导入到vaultwarden</h2><p><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_5.png" alt="img_5.png"></p><h2 id="3-分类整理"><a href="#3-分类整理" class="headerlink" title="3. 分类整理"></a>3. 分类整理</h2><p>导入完成后，可在<code>密码库</code>菜单中根据自己需要进行分类整理。<br><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_6.png" alt="img_6.png"></p><h1 id="三、客户端配置"><a href="#三、客户端配置" class="headerlink" title="三、客户端配置"></a>三、客户端配置</h1><h2 id="1-配置浏览器插件"><a href="#1-配置浏览器插件" class="headerlink" title="1. 配置浏览器插件"></a>1. 配置浏览器插件</h2><h3 id="1-1-下载浏览器插件"><a href="#1-1-下载浏览器插件" class="headerlink" title="1.1 下载浏览器插件"></a>1.1 下载浏览器插件</h3><p>点击<a href="https://microsoftedge.microsoft.com/addons/detail/bitwarden-%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%99%A8/jbkfoedolllekgbhcbcoahefnbanhhlh">Bitwarden 密码管理器</a>安装对应的浏览器插件。<br><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_7.png" alt="img_7.png"></p><h3 id="1-2-登录插件"><a href="#1-2-登录插件" class="headerlink" title="1.2 登录插件"></a>1.2 登录插件</h3><p>使用域名<code>https://waden.cgio.asia</code>以及注册的邮箱+主密码进行登录，登录后的界面功能丰富，自带密码生成器，以后可以使用这个密码生成器为不同网站密码生成更加安全可靠的无规律密码。<br><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_8.png" alt="img_8.png"></p><h3 id="1-3-设置自动填充"><a href="#1-3-设置自动填充" class="headerlink" title="1.3 设置自动填充"></a>1.3 设置自动填充</h3><p>在插件的<code>设置</code>菜单里进行自动填充设置，以后当进入到指定网页后，需要登录的话，会进行自动填充的操作，非常方便。<br><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_9.png" alt="img_9.png"></p><h2 id="2-移动端使用"><a href="#2-移动端使用" class="headerlink" title="2. 移动端使用"></a>2. 移动端使用</h2><p>移动端的配置方式与浏览器插件配置方式一致，均是使用 <code>域名 + 邮箱 + 主密码</code> 组合的方式进行登录，登陆后自动同步密码。</p><h3 id="2-1-Android端"><a href="#2-1-Android端" class="headerlink" title="2.1 Android端"></a>2.1 Android端</h3><p>Android端有官方版<code>bitwarden</code>和第三方版<code>keyGuard</code>可用，建议使用第三方的<code>keyguard</code>，更好用！</p><h4 id="配置自动填充"><a href="#配置自动填充" class="headerlink" title="配置自动填充"></a>配置自动填充</h4><p>手机设置界面点击最上方的搜索框，输入<code>自动填充</code>，会进入到配置界面，选择<code>keyguard</code>作为首选填充服务<br><img src="/%E6%9E%81%E7%A9%BA%E9%97%B4NAS%E6%90%AD%E5%BB%BAvaultwarden%E8%87%AA%E6%89%98%E7%AE%A1%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83/img_10.png" alt="img_10.png"></p><h3 id="2-2-iOS-iPad-端"><a href="#2-2-iOS-iPad-端" class="headerlink" title="2.2 iOS | iPad 端"></a>2.2 iOS | iPad 端</h3><p>目前只有官方的<code>bitwarden</code>可用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
      <tag>NAS</tag>
      
      <tag>极空间</tag>
      
      <tag>vaultwarden</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FRP内网服务配置https</title>
    <link href="/FRP%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEhttps.html"/>
    <url>/FRP%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEhttps.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、实际需求"><a href="#一、实际需求" class="headerlink" title="一、实际需求"></a>一、实际需求</h1><p>自己拥有了一台极空间Z4的NAS后，在上面部署了一些服务来满足自身的生活需求：</p><ul><li><a href="https://github.com/dani-garcia/vaultwarden">Vaultwarden</a>：可自托管的个人密码安全管理使用平台，支持多端同步使用，出于安全考虑，客户端需要通过 https 协议与服务端通信；</li><li><a href="https://gotify.net/">Gotify</a>：自托管的开源消多端消息接发平台，自己发布的一些服务可通过gotify-server端来向移动端实时发送通知；</li><li><a href="https://joplinapp.org/">Joplin</a>：自托管的开源多端同步的笔记平台；</li><li><a href="https://about.gitea.com/">Gitea</a>：自托管的开源多端同步的代码仓库平台；</li><li><a href="https://github.com/hectorqin/reader">Reader</a>：自托管的开源阅读平台</li><li>… …</li></ul><p>因受限于背景移动宽带的可恶嘴脸，每月19元的IPV4，还得各种打电话改桥接，最终还要被限制80和443端口的使用，虽然可以曲线救国，通过<code>IPV6+DDNS</code>的方式来实现将内网服务转发到外网使用，但IPV6也不是免费的啊！<br>不想付费买IP，只能采用更加曲线的形式，来达到我的目的了。</p><p>它那就是<code>vps+frp</code>组合技：</p><ul><li><p>VPS：国外服务器</p><blockquote><p>平时有使用谷歌的需求，就在搬瓦工上淘了性价比比较高的服务器来FxxxGW，配置虽低，但跑个代理+FRP的服务端足够了!</p></blockquote></li><li><p>FRP：开源内网穿透神器</p></li><li><p>域名：国内或国外域名商购买即可</p></li></ul><h1 id="二、服务配置"><a href="#二、服务配置" class="headerlink" title="二、服务配置"></a>二、服务配置</h1><h2 id="1-域名托管到cloudfare"><a href="#1-域名托管到cloudfare" class="headerlink" title="1. 域名托管到cloudfare"></a>1. 域名托管到<code>cloudfare</code></h2><ol><li><p>注册账号</p></li><li><p>添加域名</p></li><li><p>域名服务商处配置cloufare的Nameserver</p></li><li><p>域名的DNS添加A记录，域名与VPS域名绑定，不用代理</p><p><img src="/FRP%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEhttps/image-20240910021943840.png" alt="image-20240910021943840"></p></li></ol><h2 id="2-安装-FRPS"><a href="#2-安装-FRPS" class="headerlink" title="2. 安装 FRPS"></a>2. 安装 FRPS</h2><ol><li><p><a href="https://github.com/fatedier/frp/releases">下载FRP</a>安装包到<code>/usr/local</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local<br> wget https://github.com/fatedier/frp/releases/download/v0.60.0/frp_0.60.0_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar -zxf frp_0.60.0_linux_amd64.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">改名</span><br>mv frp_0.60.0_linux_amd64 frp<br></code></pre></td></tr></table></figure></li><li><p>修改 frps.toml</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">bindPort</span> = <span class="hljs-string">7000</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"># 443端口不要变，要不域名后面还要跟端口号，多恶心呐 </span><br><span class="hljs-attr">vhostHTTPSPort</span> = <span class="hljs-string">443</span><br><span class="hljs-attr">auth.token</span>=<span class="hljs-string">&quot;xxxxxx&quot;</span><br><br><span class="hljs-attr">webServer.addr</span>=<span class="hljs-string">&quot;0.0.0.0&quot;</span><br><span class="hljs-attr">webServer.port</span>=<span class="hljs-string">7777</span><br><span class="hljs-attr">webServer.user</span>=<span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-attr">webServer.password</span>=<span class="hljs-string">&quot;xxxxxx&quot;</span><br><br><span class="hljs-attr">subdomainHost</span> = <span class="hljs-string">&quot;cgio.asia&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>创建FRPS开机自启文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/systemd/system/frps.service<br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置内容：</span><br>[Unit]<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">服务名称，可自定义</span><br> Description = frp server<br> After = network.target syslog.target<br> Wants = network.target<br> <br> [Service]<br> Type = simple<br> ExecStart = /usr/local/frp/frps -c /usr/local/frp/frps.toml<br> <br> [Install]<br> WantedBy = multi-user.target<br></code></pre></td></tr></table></figure></li><li><p>开启服务及自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开机自启</span><br>systemctl enable frps<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启FRPS服务</span><br>systemctl start frps<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看FRPS状态</span><br>systemctl status frps<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-泛域名证书申请"><a href="#3-泛域名证书申请" class="headerlink" title="3. 泛域名证书申请"></a>3. 泛域名证书申请</h2><h3 id="3-1-VPS通过二进制形式安装Lucky，启动服务"><a href="#3-1-VPS通过二进制形式安装Lucky，启动服务" class="headerlink" title="3.1 VPS通过二进制形式安装Lucky，启动服务"></a>3.1 VPS通过二进制形式安装<code>Lucky</code>，启动服务</h3><p><a href="https://lucky666.cn/docs/install#%E8%87%AA%E5%8A%A8%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85">安装运行&amp;升级备份 | Lucky (lucky666.cn)</a></p><h3 id="3-2-域名证书自动申请设置"><a href="#3-2-域名证书自动申请设置" class="headerlink" title="3.2 域名证书自动申请设置"></a>3.2 域名证书自动申请设置</h3><p>【安全管理】→ 【添加证书】</p><p>按下图的记录添加自己的域名，填写完后，很快就能申请成功！成功后把证书下载下来备用。</p><p><img src="/FRP%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEhttps/image-20240910022746382.png" alt="image-20240910022746382"></p><h3 id="3-3-其它"><a href="#3-3-其它" class="headerlink" title="3.3 其它"></a>3.3 其它</h3><p>可在【Web服务】处，配置反向代理，这里如果使用了443端口，那么<code>frps</code>将无法启动（端口冲突）。如果对服务的安全性要求不高的话，可直接通过这个功能将穿透到当前服务器的内网服务，以反向代理的形式对外发布。</p><p>这个服务需要<code>frpc.toml</code>处配置的服务对应的<code>remotePort</code>！</p><h2 id="4-安装-FRPC"><a href="#4-安装-FRPC" class="headerlink" title="4. 安装 FRPC"></a>4. 安装 FRPC</h2><p>极空间通过Docker下载FRPC镜像备用，并准备一个文件夹存放配置文件及泛域名证书。</p><h3 id="4-1-网络模式使用hosts"><a href="#4-1-网络模式使用hosts" class="headerlink" title="4.1 网络模式使用hosts"></a>4.1 网络模式使用<code>hosts</code></h3><p><img src="/FRP%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEhttps/image-20240910020557647.png" alt="image-20240910020557647"></p><h3 id="4-2-挂载-frpc-toml，以及上一步中下载的泛域名证书"><a href="#4-2-挂载-frpc-toml，以及上一步中下载的泛域名证书" class="headerlink" title="4.2 挂载 frpc.toml，以及上一步中下载的泛域名证书"></a>4.2 挂载 frpc.toml，以及上一步中下载的泛域名证书</h3><p><img src="/FRP%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEhttps/image-20240910020643749.png" alt="image-20240910020643749"></p><h3 id="4-2-配置-frpc-toml"><a href="#4-2-配置-frpc-toml" class="headerlink" title="4.2 配置 frpc.toml"></a>4.2 配置 frpc.toml</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment">#这里填写IPV4地址吧，如果是长期域名，也可直接填写域名，一年期的域名还是用IPV4方便</span><br><span class="hljs-attr">serverAddr</span> = <span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span><br><span class="hljs-comment"># frps.toml中配置的 bindPort值</span><br><span class="hljs-attr">serverPort</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-comment"># 与frps.toml中配置的一致</span><br><span class="hljs-attr">auth.token</span>=<span class="hljs-string">&quot;xxxxxx&quot;</span><br><br><span class="hljs-comment">######### 配置Joplin服务 #########</span><br><span class="hljs-section">[[proxies]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;blog&quot;</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;https&quot;</span><br><span class="hljs-attr">subdomain</span> = <span class="hljs-string">&quot;blog&quot;</span> <br><br><span class="hljs-section">[proxies.plugin]</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;https2http&quot;</span><br><span class="hljs-attr">localAddr</span> = <span class="hljs-string">&quot;192.168.0.109:3400&quot;</span><br><span class="hljs-attr">crtPath</span> = <span class="hljs-string">&quot;/etc/frp/server.crt&quot;</span><br><span class="hljs-attr">keyPath</span> = <span class="hljs-string">&quot;/etc/frp/server.key&quot;</span><br><span class="hljs-comment">###############################</span><br><br><span class="hljs-comment">######### 配置Monitor服务 #########</span><br><span class="hljs-section">[[proxies]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;monitor&quot;</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;https&quot;</span><br><span class="hljs-attr">subdomain</span> = <span class="hljs-string">&quot;monitor&quot;</span> <br><br><span class="hljs-section">[proxies.plugin]</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;https2http&quot;</span><br><span class="hljs-attr">localAddr</span> = <span class="hljs-string">&quot;192.168.0.109:8006&quot;</span><br><span class="hljs-attr">crtPath</span> = <span class="hljs-string">&quot;/etc/frp/server.crt&quot;</span><br><span class="hljs-attr">keyPath</span> = <span class="hljs-string">&quot;/etc/frp/server.key&quot;</span><br><span class="hljs-comment">################################</span><br></code></pre></td></tr></table></figure><h3 id="4-3-启动容器"><a href="#4-3-启动容器" class="headerlink" title="4.3 启动容器"></a>4.3 启动容器</h3><p><img src="/FRP%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEhttps/image-20240910021020498.png" alt="image-20240910021020498"></p><p>搞定！</p><p>接下来，浏览器地址栏输入：</p><p><a href="https://blog.cgio.asia/">https://blog.cgio.asia</a></p><p><a href="https://monitor.cgio.asia/">https://monitor.cgio.asia</a></p><p>即可访问内网服务了！</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frp</tag>
      
      <tag>https</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用技巧</title>
    <link href="/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html"/>
    <url>/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、使用草稿"><a href="#1、使用草稿" class="headerlink" title="1、使用草稿"></a>1、使用草稿</h2><p>直接使用<code>hexo new title_nmame</code>的方式创建的文章，如果短时间内未完成，在执行<code>hexo d</code>命令后，依然会被渲染解析到public文件夹下，并随着上传到仓库后直接发布到博客中。<br>为避免这种情况出现，可以使用草稿处理这一类的文章。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建草稿</span><br>hexo new draft &lt;title_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">该命令配合插件[hexo-browsersync]可以实时查看草稿文档的显示效果</span><br>hexo -S --draft<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发布草稿，file_name不包含`.md`后缀</span><br>hexo P &lt;file_name&gt;<br></code></pre></td></tr></table></figure><h2 id="2、常用命令"><a href="#2、常用命令" class="headerlink" title="2、常用命令"></a>2、常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">开启服务</span><br>hexo server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建文章</span><br>hexo new &lt;title_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建页面</span><br>hexo new page &lt;page_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空缓存</span><br>hexo clean<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成静态文章</span><br>hexo generate<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发布文章</span><br>hexo deploy<br></code></pre></td></tr></table></figure><h2 id="3、配图"><a href="#3、配图" class="headerlink" title="3、配图"></a>3、配图</h2><h3 id="3-1、logo免费生成网站"><a href="#3-1、logo免费生成网站" class="headerlink" title="3.1、logo免费生成网站"></a>3.1、logo免费生成网站</h3><p>想要个性化博客网站图标的可以去试试，不需要注册、付费，但要花精力去挑选！</p><ul><li><a href="https://www.cleanpng.com/">Cleanpng</a><iframe src="https://www.cleanpng.com/" width="100%" height="300" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe></li></ul><h3 id="3-2、优质背景图片网站"><a href="#3-2、优质背景图片网站" class="headerlink" title="3.2、优质背景图片网站"></a>3.2、优质背景图片网站</h3><p>根据自己需要挑选不同风格的图片作为文章背景图。</p><ul><li><a href="https://wallpaperhub.app/">Wallpaper Hub</a><iframe src="https://wallpaperhub.app/" width="100%" height="300" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe></li><li><a href="https://wallhaven.cc/">Wallhaven</a><iframe src="https://wallhaven.cc/" width="100%" height="300" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe></li><li><a href="https://unsplash.com/">Unsplash</a><iframe src="https://unsplash.com/" width="100%" height="300" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe></li></ul><h2 id="4、使用相对路径保存图片"><a href="#4、使用相对路径保存图片" class="headerlink" title="4、使用相对路径保存图片"></a>4、使用相对路径保存图片</h2><p>当前<code>hexo-7.3.0</code>版本内置了<code>hexo-renderer-marked</code>插件，可以方便的处理使用相对路径时，typora 与 hexo 无法同时显示图片的问题！</p><h3 id="4-1、修改config-yml文件"><a href="#4-1、修改config-yml文件" class="headerlink" title="4.1、修改config.yml文件"></a>4.1、修改<code>config.yml</code>文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 已有配置，默认值为 false，这里改为 true</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 需要添加的配置</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="4-2、通过命令创建新文件"><a href="#4-2、通过命令创建新文件" class="headerlink" title="4.2、通过命令创建新文件"></a>4.2、通过命令创建新文件</h3><p>使用下面的命令创建完成后，会自动生成一个同名的文件夹用于存放图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &#x27;markdown_file_name&#x27;<br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://hexo.fluid-dev.com/docs/guide/#%E7%A4%BE%E4%BA%A4%E9%A1%B5%E5%9B%BE%E6%A0%87">Hexo Fluid 用户手册</a></li><li><a href="https://blog.17lai.site/posts/cf0f47fd/#Markdown-%E6%8F%92%E4%BB%B6">Hexo Markdown以及各种插件功能测试</a></li><li><a href="https://blog.17lai.site/posts/92d347d6/">https://blog.17lai.site/posts/92d347d6/</a></li><li><a href="https://juejin.cn/post/7306723921717198899">Hexo插入图片（好用的办法）</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world.html"/>
    <url>/hello-world.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
